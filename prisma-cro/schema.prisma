// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("AWS_CRO_DATABASE_URL")
}

model VendorCompany {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_name          String
  company_size          String?
  company_average_size  Float?
  company_revenue       String?
  company_revenue_value Float?
  company_ipo_status    String?
  company_description   String?
  website_url           String
  linkedin_url          String
  crunchbase_url        String
  product               String?
  logo_url              String?
  is_active             Boolean
  is_cromatic_vendor    Boolean
  verified_at           DateTime?

  traffic_infos                 TrafficInfo[]
  linkedin_infos                LinkedinInfo[]
  funding_infos                 FundingInfo[]
  website_infos                 WebsiteInfo[]
  vendor_company_subspecialties VendorCompanySubspecialty[]
  vendor_company_locations      VendorCompanyLocation[]
  vendor_company_types          VendorCompanyType[]
  vendor_company_certifications VendorCompanyCertification[]
  vendor_survey                 VendorSurvey?
  sourced_cros                  SourcedCro[]

  @@map("vendor_companies")
}

model Specialty {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  definition     String?
  subspecialties Subspecialty[]

  @@map("specialties")
}

model Subspecialty {
  id                            String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                          String
  definition                    String?
  is_linked_to_vendor           Boolean                     @default(false)
  embedding                     Json?
  specialty_id                  String                      @db.Uuid
  specialty                     Specialty                   @relation(fields: [specialty_id], references: [id])
  vendor_company_subspecialties VendorCompanySubspecialty[]

  @@map("subspecialties")
}

model VendorCompanySubspecialty {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subspecialty_id   String        @db.Uuid
  subspecialty      Subspecialty  @relation(fields: [subspecialty_id], references: [id])
  vendor_company_id String        @db.Uuid
  vendor_company    VendorCompany @relation(fields: [vendor_company_id], references: [id])

  @@unique([subspecialty_id, vendor_company_id])
  @@map("vendor_company_subspecialties")
}

model VendorCompanyLocation {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  country           String
  vendor_company_id String        @db.Uuid
  vendor_company    VendorCompany @relation(fields: [vendor_company_id], references: [id])

  @@unique([country, vendor_company_id])
  @@map("vendor_company_locations")
}

model VendorCompanyType {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_type      String
  vendor_company_id String        @db.Uuid
  vendor_company    VendorCompany @relation(fields: [vendor_company_id], references: [id])

  @@unique([company_type, vendor_company_id])
  @@map("vendor_company_types")
}

model VendorCompanyCertification {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  certification_name String
  vendor_company_id  String        @db.Uuid
  vendor_company     VendorCompany @relation(fields: [vendor_company_id], references: [id])

  @@unique([certification_name, vendor_company_id])
  @@map("vendor_company_certifications")
}

model TrafficInfo {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id      String        @unique @db.Uuid
  last_updated    DateTime      @default(now())
  display_date    DateTime
  rank            Int
  visits          Int
  users           Int
  search_organic  Int
  search_paid     Int
  social_organic  Int
  social_paid     Int
  referral        Int
  time_on_site    Int
  pages_per_visit Float
  bounce_rate     Float
  categories      String
  vendor_company  VendorCompany @relation(fields: [company_id], references: [id])

  @@map("traffic_info")
}

model LinkedinInfo {
  id                 String        @id
  company_id         String        @unique @db.Uuid
  last_updated       DateTime      @default(now())
  company_size       String
  industry           String
  description        String
  linkedin_followers Int
  founded            Int
  created            DateTime
  li_last_updated    DateTime
  type               String
  employees_count    Int
  vendor_company     VendorCompany @relation(fields: [company_id], references: [id])

  company_specialties_collection        CompanySpecialty[]
  company_featured_employees_collection FeaturedEmployee[]
  locations_collection                  Location[]

  @@map("linkedin_info")
}

model CompanySpecialty {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  specialty_id     String
  linkedin_info_id String
  specialty        String
  linkedin_info    LinkedinInfo @relation(fields: [linkedin_info_id], references: [id])

  @@unique([specialty_id, linkedin_info_id])
  @@map("company_specialties")
}

model FeaturedEmployee {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id      String
  linkedin_info_id String
  linkedin_url     String
  linkedin_info    LinkedinInfo @relation(fields: [linkedin_info_id], references: [id])

  @@unique([employee_id, linkedin_info_id])
  @@map("featured_employees")
}

model Location {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  location_id      String
  linkedin_info_id String
  location_address String
  linkedin_info    LinkedinInfo @relation(fields: [linkedin_info_id], references: [id])

  @@unique([location_id, linkedin_info_id])
  @@map("locations")
}

model FundingInfo {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id      String        @unique @db.Uuid
  last_updated    DateTime      @default(now())
  company_img_url String
  company_type    String
  ipo_status      String
  revenue_range   String
  org_rank        Int
  num_articles    Int
  vendor_company  VendorCompany @relation(fields: [company_id], references: [id])

  categories            Category[]
  press_references      PressReference[]
  raised_funding_rounds FundingRound[]
  founders              Founder[]

  @@unique([id, company_id])
  @@map("funding_info")
}

model Category {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_id     String
  funding_info_id String      @db.Uuid
  category        String
  funding_info    FundingInfo @relation(fields: [funding_info_id], references: [id])

  @@unique([category_id, funding_info_id])
  @@map("categories")
}

model PressReference {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  press_id        String
  funding_info_id String      @db.Uuid
  author          String
  title           String
  publisher       String
  url             String
  posted_on       DateTime
  funding_info    FundingInfo @relation(fields: [funding_info_id], references: [id])

  @@unique([press_id, funding_info_id])
  @@map("press_references")
}

model FundingRound {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  round_id          String
  funding_info_id   String      @db.Uuid
  is_equity         Boolean
  investment_stage  String
  short_description String
  currency          String
  money_raised      BigInt
  announced_on      DateTime
  funding_info      FundingInfo @relation(fields: [funding_info_id], references: [id])

  @@unique([round_id, funding_info_id])
  @@map("funding_rounds")
}

model Founder {
  id                        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  founder_id                String
  funding_info_id           String      @db.Uuid
  full_name                 String
  primary_job_title         String
  description               String
  linkedin                  String
  num_founded_organizations Int
  rank_person               Int
  funding_info              FundingInfo @relation(fields: [funding_info_id], references: [id])

  @@unique([founder_id, funding_info_id])
  @@map("founders")
}

model WebsiteInfo {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id   String   @unique @db.Uuid
  specialties  String
  last_updated DateTime @default(now())

  vendor_company VendorCompany @relation(fields: [company_id], references: [id])

  @@map("website_info")
}

model VendorSurvey {
  id                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendor_company_id       String?  @unique @db.Uuid
  company_name            String?
  company_types           String[]
  company_description     String?
  company_ipo_status      String?
  company_revenue         String?
  company_size            String?
  logo_url                String?
  website                 String?
  countries               String[]
  subspecialty_ids        String[]
  custom_specialties      String[]
  certifications          String[]
  products                String[]
  respondent_name         String?
  respondent_company_role String?
  email                   String?
  note                    String?
  attachment_key          String?
  attachment_file_name    String?
  attachment_content_type String?
  status                  String
  step                    String?
  reminder_counts         Int      @default(0)
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  vendor_company VendorCompany? @relation(fields: [vendor_company_id], references: [id])

  @@map("vendor_surveys")
}

model SourcingSession {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_title           String
  project_desc            String
  preparation_details     String
  vendor_requirement      String
  task_id                 String
  task_canceled_at        DateTime?
  user_id                 String                 @db.Uuid
  sourcing_subspecialties SourcingSubspecialty[]
  sourced_cros            SourcedCro[]
  sourcing_attachments    SourcingAttachment[]
  created_at              DateTime               @default(now())
  updated_at              DateTime               @default(now()) @updatedAt
  sourcing_extracted_rfp  SourcingExtractedRfp?

  @@map("sourcing_sessions")
}

model SourcingExtractedRfp {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_title       String
  project_desc        String
  preparation_details String
  vendor_requirement  String
  sourcing_session_id String          @unique @db.Uuid
  created_at          DateTime        @default(now())
  updated_at          DateTime        @default(now()) @updatedAt
  sourcing_session    SourcingSession @relation(fields: [sourcing_session_id], references: [id], onDelete: Cascade)

  @@map("sourcing_extracted_rfps")
}

model SourcingSubspecialty {
  id                     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String
  related_subspecialties String[]

  sourcing_session_id String          @db.Uuid
  sourcing_session    SourcingSession @relation(fields: [sourcing_session_id], references: [id], onDelete: Cascade)

  @@map("sourcing_subspecialties")
}

model SourcingAttachment {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key          String   @unique
  filename     String
  content_type String?
  byte_size    BigInt
  created_at   DateTime @default(now())

  sourcing_session_id String          @db.Uuid
  sourcing_session    SourcingSession @relation(fields: [sourcing_session_id], references: [id], onDelete: Cascade)

  @@map("sourcing_attachments")
}

model SourcedCro {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  score          Float
  is_shortlisted Boolean

  vendor_company_id String        @db.Uuid
  vendor_company    VendorCompany @relation(fields: [vendor_company_id], references: [id])

  sourcing_session_id String          @db.Uuid
  sourcing_session    SourcingSession @relation(fields: [sourcing_session_id], references: [id], onDelete: Cascade)

  @@map("sourced_cros")
}
