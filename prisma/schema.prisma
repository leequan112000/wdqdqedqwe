// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                     String    @unique
  first_name                String
  last_name                 String
  encrypted_password        String?
  reset_password_token      String?   @unique
  reset_password_expiration DateTime?
  reset_password_sent_at    DateTime?
  remember_created_at       DateTime?
  created_at                DateTime  @default(now())
  updated_at                DateTime  @updatedAt

  customer                   Customer?
  vendor_member              VendorMember?
  messages                   Message[]
  notifications              Notification[]              @relation("ReceiverNotifications")
  sent_notifications         Notification[]              @relation("SenderNotifications")
  meetingAttendeeConnections MeetingAttendeeConnection[]
  meetingEvents              MeetingEvent[]
  project_attachments        ProjectAttachment[]
  CompanyAttachment          CompanyAttachment[]
  biotech_invite_vendors     BiotechInviteVendor[]

  @@map("users")
}

model Customer {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  has_setup_profile Boolean  @default(false)
  team              String?
  job_title         String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user_id String @unique @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])

  biotech_id String  @db.Uuid
  biotech    Biotech @relation(fields: [biotech_id], references: [id])

  project_requests     ProjectRequest[]
  customer_connections CustomerConnection[]

  @@index([biotech_id])
  @@map("customers")
}

model Admin {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username               String    @unique
  email                  String    @unique
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  encrypted_password     String
  reset_password_token   String?   @unique
  reset_password_sent_at DateTime?
  remember_created_at    DateTime?
  invitation_accepted_at DateTime?
  team                   String?

  @@map("admins")
}

model Biotech {
  id                                          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                        String    @unique
  created_at                                  DateTime  @default(now())
  updated_at                                  DateTime  @updatedAt
  has_setup_profile                           Boolean   @default(false)
  address                                     String?
  address1                                    String?
  address2                                    String?
  city                                        String?
  state                                       String?
  country                                     String?
  zipcode                                     String?
  website                                     String?
  about                                       String?
  cda_pandadoc_file_id                        String?
  cda_pandadoc_signer                         String?
  cda_signed_at                               DateTime?
  skip_cda                                    Boolean   @default(false)
  number_of_reqs_allowed_without_subscription Int       @default(0)
  account_type                                String?
  legal_name                                  String?   @unique
  upload_limit                                Int       @default(1048576)
  founded_year                                String?
  team_size                                   String?
  linkedin_url                                String?
  twitter_url                                 String?
  facebook_url                                String?
  biotech_extra_info                          String?

  customers              Customer[]
  subscriptions          Subscription[]
  chats                  Chat[]
  project_requests       ProjectRequest[]
  biotech_invite_vendors BiotechInviteVendor[]

  @@map("biotechs")
}

model VendorCompany {
  id                          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                        String
  website                     String?
  description                 String?
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @updatedAt
  address                     String?
  address1                    String?
  address2                    String?
  city                        String?
  state                       String?
  country                     String?
  zipcode                     String?
  cda_pandadoc_file_id        String?
  cda_pandadoc_signer         String?
  cda_signed_at               DateTime?
  skip_cda                    Boolean   @default(false)
  skip_certification_tag      Boolean   @default(false)
  skip_lab_specialization     Boolean   @default(false)
  legal_name                  String?   @unique
  university_name             String?
  vendor_type                 String?
  principal_investigator_name String?
  google_scholar_url          String?
  founded_year                String?
  team_size                   String?
  project_completed_per_year  String?
  linkedin_url                String?
  twitter_url                 String?
  facebook_url                String?
  cro_extra_info              String?
  stripe_account              String?
  is_on_marketplace           Boolean?  @default(true)
  invited_by                  String?
  commission_rate             Float     @default(5)

  vendor_members                 VendorMember[]
  project_connections            ProjectConnection[]
  chats                          Chat[]
  certification_tag_connections  CertificationTagConnection[]
  lab_specialization_connections LabSpecializationConnection[]
  CompanyAttachment              CompanyAttachment[]
  invoices                       Invoice[]

  @@map("vendor_companies")
}

model VendorMember {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  is_primary_member Boolean  @default(false)
  phone             String?
  title             String?
  department        String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user_id String @unique @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])

  vendor_company_id String         @db.Uuid
  vendor_company    VendorCompany? @relation(fields: [vendor_company_id], references: [id])

  vendor_member_connections VendorMemberConnection[]

  @@map("vendor_members")
}

model Subscription {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stripe_subscription_id String
  stripe_customer_id     String
  status                 String
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  ended_at               DateTime?

  biotech_id String  @db.Uuid
  biotech    Biotech @relation(fields: [biotech_id], references: [id])

  @@map("subscriptions")
}

model ProjectRequest {
  id                                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                               String
  vendor_requirement                  String
  objective_description               String
  preparation_description             String?
  in_contact_with_vendor              Boolean
  existing_vendor_contact_description String?
  project_challenge_description       String?
  vendor_search_timeframe             String
  max_budget                          Decimal?  @db.Decimal(14, 2)
  vendor_location_requirement         String?
  project_start_time_requirement      String?
  project_deadline_requirement        String?
  status                              String
  created_at                          DateTime  @default(now())
  updated_at                          DateTime  @updatedAt
  initial_assigned_at                 DateTime?
  is_private                          Boolean   @default(false)

  biotech_id String  @db.Uuid
  biotech    Biotech @relation(fields: [biotech_id], references: [id])

  customer_id String   @db.Uuid
  customer    Customer @relation(fields: [customer_id], references: [id])

  project_request_comments ProjectRequestComment[]
  project_connections      ProjectConnection[]
  biotech_invite_vendors      BiotechInviteVendor[]

  @@index([customer_id])
  @@map("project_requests")
}

model ProjectRequestComment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  project_request_id String         @db.Uuid
  project_request    ProjectRequest @relation(fields: [project_request_id], references: [id])

  @@index([project_request_id])
  @@index([created_at])
  @@map("project_request_comments")
}

model ProjectConnection {
  id                         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendor_status              String?
  created_at                 DateTime  @default(now())
  updated_at                 DateTime  @updatedAt
  final_contract_uploaded_at DateTime?
  expired_at                 DateTime?

  project_request_id String         @db.Uuid
  project_request    ProjectRequest @relation(fields: [project_request_id], references: [id])

  vendor_company_id String        @db.Uuid
  vendor_company    VendorCompany @relation(fields: [vendor_company_id], references: [id])

  vendor_member_connections VendorMemberConnection[]
  customer_connections      CustomerConnection[]
  chats                     Chat[]
  project_attachments       ProjectAttachment[]
  MeetingEvent              MeetingEvent[]
  quotes                    Quote[]

  @@index([project_request_id])
  @@index([vendor_company_id])
  @@map("project_connections")
}

model VendorMemberConnection {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  project_connection_id String            @db.Uuid
  project_connection    ProjectConnection @relation(fields: [project_connection_id], references: [id])

  vendor_member_id String       @db.Uuid
  vendor_member    VendorMember @relation(fields: [vendor_member_id], references: [id])

  @@unique([project_connection_id, vendor_member_id])
  @@index([project_connection_id])
  @@map("vendor_member_connections")
}

model CustomerConnection {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  project_connection_id String            @db.Uuid
  project_connection    ProjectConnection @relation(fields: [project_connection_id], references: [id])

  customer_id String   @db.Uuid
  customer    Customer @relation(fields: [customer_id], references: [id])

  @@unique([project_connection_id, customer_id])
  @@index([project_connection_id])
  @@map("customer_connections")
}

model Invitation {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender_type   String
  sender_id     String   @db.Uuid
  receiver_type String
  receiver_id   String   @db.Uuid
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([sender_type, sender_id])
  @@index([receiver_type, receiver_id])
  @@map("invitations")
}

model Chat {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  biotech_id String  @db.Uuid
  biotech    Biotech @relation(fields: [biotech_id], references: [id])

  vendor_company_id String        @db.Uuid
  vendor_company    VendorCompany @relation(fields: [vendor_company_id], references: [id])

  project_connection_id String            @db.Uuid
  project_connection    ProjectConnection @relation(fields: [project_connection_id], references: [id])
  messages              Message[]

  @@index([biotech_id])
  @@index([vendor_company_id])
  @@map("chats")
}

model Message {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  chat_id String @db.Uuid
  chat    Chat   @relation(fields: [chat_id], references: [id])

  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])

  @@index([chat_id])
  @@index([user_id])
  @@map("messages")
}

model Notification {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  notification_type String
  message           String
  params            Json
  read_at           DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  recipient_id String  @db.Uuid
  recipient    User    @relation("ReceiverNotifications", fields: [recipient_id], references: [id])
  sender_id    String? @db.Uuid
  sender       User?   @relation("SenderNotifications", fields: [sender_id], references: [id])

  @@index([sender_id])
  @@index([recipient_id])
  @@index([read_at])
  @@map("notifications")
}

model ProjectAttachment {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key           String   @unique
  filename      String
  document_type Int
  content_type  String?
  byte_size     BigInt
  created_at    DateTime @default(now())

  project_connection_id String            @db.Uuid
  project_connection    ProjectConnection @relation(fields: [project_connection_id], references: [id])
  milestone_id          String?           @db.Uuid
  milestone             Milestone?        @relation(fields: [milestone_id], references: [id])
  uploader_id           String?           @db.Uuid
  uploader              User?             @relation(fields: [uploader_id], references: [id])

  @@map("project_attachments")
}

model MeetingEvent {
  id                         String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                      String
  description                String?
  start_time                 DateTime
  end_time                   DateTime
  timezone                   String
  meeting_link               String
  phone                      String?
  phone_pin                  String?
  phone_country              String?
  platform                   String
  platform_event_id          String?
  created_at                 DateTime                    @default(now())
  updated_at                 DateTime                    @updatedAt
  project_connection_id      String                      @db.Uuid
  organizer_id               String                      @db.Uuid
  project_connection         ProjectConnection           @relation(fields: [project_connection_id], references: [id])
  meetingAttendeeConnections MeetingAttendeeConnection[]
  organizer                  User                        @relation(fields: [organizer_id], references: [id])

  @@map("meeting_events")
}

model MeetingAttendeeConnection {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  meeting_event_id String       @db.Uuid
  meeting_event    MeetingEvent @relation(fields: [meeting_event_id], references: [id])
  user_id          String       @db.Uuid
  user             User         @relation(fields: [user_id], references: [id])

  @@map("meeting_attendee_connections")
}

model InterestedCro {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_name String
  email        String
  company_type String
  service      String
  interest     String
  created_at   DateTime @default(now())
  first_name   String?
  last_name    String?

  @@map("interested_cros")
}

model CertificationTag {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name  String   @unique
  short_name String?
  priority   Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  certification_tag_connections CertificationTagConnection[]

  @@map("certification_tags")
}

model CertificationTagConnection {
  id                   String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendor_company_id    String           @db.Uuid
  vendor_company       VendorCompany    @relation(fields: [vendor_company_id], references: [id])
  certification_tag_id String           @db.Uuid
  certification_tag    CertificationTag @relation(fields: [certification_tag_id], references: [id])
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt

  @@unique([vendor_company_id, certification_tag_id])
  @@map("certification_tag_connections")
}

model LabSpecialization {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name  String   @unique
  short_name String?
  priority   Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  lab_specializations_connections LabSpecializationConnection[]

  @@map("lab_specializations")
}

model LabSpecializationConnection {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendor_company_id     String            @db.Uuid
  vendor_company        VendorCompany     @relation(fields: [vendor_company_id], references: [id])
  lab_specialization_id String            @db.Uuid
  lab_specialization    LabSpecialization @relation(fields: [lab_specialization_id], references: [id])
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  @@unique([vendor_company_id, lab_specialization_id])
  @@map("lab_specialization_connections")
}

model Milestone {
  id                    String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  short_id              String              @unique
  title                 String
  description           String?
  amount                Decimal             @db.Decimal(14, 2)
  created_at            DateTime            @default(now())
  updated_at            DateTime            @updatedAt
  quote                 Quote               @relation(fields: [quote_id], references: [id])
  quote_id              String              @db.Uuid
  status                String
  payment_status        String
  vendor_payment_status String
  timeline              String?
  ordinal               Int                 @default(0)
  ProjectAttachment     ProjectAttachment[]
  invoice_item          InvoiceItem?

  @@map("milestones")
}

model Quote {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  short_id              String            @unique
  amount                Decimal           @db.Decimal(14, 2)
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt
  project_connection    ProjectConnection @relation(fields: [project_connection_id], references: [id])
  project_connection_id String            @db.Uuid
  milestones            Milestone[]
  status                String
  expired_at            DateTime?

  @@map("quotes")
}

model CompanyAttachment {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key           String   @unique
  filename      String
  document_type Int
  content_type  String?
  byte_size     BigInt
  created_at    DateTime @default(now())

  vendor_company_id String?        @db.Uuid
  vendor_company    VendorCompany? @relation(fields: [vendor_company_id], references: [id])
  uploader_id       String?        @db.Uuid
  uploader          User?          @relation(fields: [uploader_id], references: [id])

  @@map("company_attachments")
}

model Invoice {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_number    String
  vendor_company_id String        @db.Uuid
  payment_status    String
  due_at            DateTime
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  paid_at           DateTime?
  stripe_txn_id     String?
  from_date         DateTime
  to_date           DateTime
  commission_rate   Float
  invoice_items     InvoiceItem[]
  vendor_company    VendorCompany @relation(fields: [vendor_company_id], references: [id])

  @@map("invoices")
}

model InvoiceItem {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id       String     @db.Uuid
  invoice          Invoice    @relation(fields: [invoice_id], references: [id])
  name             String
  amount           Decimal    @db.Decimal(14, 2)
  milestone_id     String?    @unique @db.Uuid
  milestone        Milestone? @relation(fields: [milestone_id], references: [id])
  milestone_amount Decimal?   @db.Decimal(14, 2)

  @@map("invoice_items")
}

model BiotechInviteVendor {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_name       String
  website            String
  first_name         String
  last_name          String
  email              String
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  biotech_id         String?         @db.Uuid
  biotech            Biotech?        @relation(fields: [biotech_id], references: [id])
  inviter_id         String?         @db.Uuid
  inviter            User?           @relation(fields: [inviter_id], references: [id])
  project_request_id String?         @db.Uuid
  project_request    ProjectRequest? @relation(fields: [project_request_id], references: [id])

  @@map("biotech_invite_vendors")
}
