type SourcingSession {
  id: String
  project_title: String
  project_desc: String
  preparation_details: String
  vendor_requirement: String
  task_id: String
  sourcing_specialties: [SourcingSpecialty]
  sourcing_subspecialties: [SourcingSubspecialty]
  sourced_cros: [SourcedCro]
}

type SourcingSpecialty {
  id: String
  name: String
  sourcing_session_id: String
  sourcing_session: SourcingSession
}

type SourcingSubspecialty {
  id: String
  name: String
  weight: Float
  sourcing_session_id: String
  sourcing_session: SourcingSession
  sourcing_specialty_id: String
  sourcing_specialty: SourcingSpecialty
}

type SourcedCro {
  id: String
  name: String
  score: Float
  is_shortlisted: Boolean
  cro_db_id: String
  sourcing_session_id: String
  sourcing_session: SourcingSession
}

type ExtractedRfp {
  project_title: String
  project_desc: String
  preparation_details: String
  vendor_requirement: String
}

type SourceRfpSpecialtyTask {
  id: String
  sourcing_session_id: String
}

type SourceRfpSpecialtySubscriptionPayload {
  task_id: String
  data: [String]
}

type Mutation {
  extractPdfRfp(
    file: Upload!
  ): ExtractedRfp
  sourceRfpSpecialties(
    project_title: String!
    project_desc: String!
    preparation_details: String!
    vendor_requirement: String!
  ): SourceRfpSpecialtyTask
}

type Subscription {
  sourceRfpSpecialties(task_id: String!): SourceRfpSpecialtySubscriptionPayload
}